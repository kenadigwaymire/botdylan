import rclpy
from rclpy.node import Node
from tf2_ros import Buffer, TransformListener
import numpy as np
from urdfpy import URDF


class GuitarTransform(Node):
    def __init__(self):
        super().__init__('guitar_transform')
        self.tf_buffer = Buffer()
        self.tf_listener = TransformListener(self.tf_buffer, self)

    def get_global_position(self, source_frame, target_frame, local_position):
        """
        Transform a local position in `source_frame` to the `target_frame` coordinate system.
        """
        try:
            # Lookup the transform between frames
            transform = self.tf_buffer.lookup_transform(
                target_frame,  # e.g., "world"
                source_frame,  # e.g., "str_high_e"
                self.get_clock().now().to_msg(),  # Current time
                timeout=rclpy.duration.Duration(seconds=1.0)
            )

            # Convert local position to global using the transform
            translation = transform.transform.translation
            rotation = transform.transform.rotation
            transform_matrix = self.transform_to_matrix(translation, rotation)

            # Convert local position to homogeneous coordinates
            local_pos_vec = np.array([local_position[0], local_position[1], local_position[2], 1.0])
            global_pos = np.dot(transform_matrix, local_pos_vec)[:3]
            return global_pos
        except Exception as e:
            self.get_logger().error(f"Error transforming {source_frame} to {target_frame}: {e}")
            return None

    @staticmethod
    def transform_to_matrix(translation, rotation):
        """
        Convert ROS 2 Transform into a 4x4 transformation matrix.
        """
        from tf_transformations import quaternion_matrix, translation_matrix
        trans_matrix = translation_matrix([translation.x, translation.y, translation.z])
        rot_matrix = quaternion_matrix([rotation.x, rotation.y, rotation.z, rotation.w])
        return np.dot(trans_matrix, rot_matrix)

    def calculate_global_positions(self, string_positions, fret_positions):
        """
        Calculate global positions for all strings and frets.
        """
        global_string_positions = {}
        global_fret_positions = {}

        for string_name, local_pos in string_positions.items():
            self.get_logger().info(f"Calculating global position for string: {string_name}")
            global_string_positions[string_name] = self.get_global_position(
                source_frame=string_name,
                target_frame="world",
                local_position=local_pos
            )

        for fret_name, local_pos in fret_positions.items():
            self.get_logger().info(f"Calculating global position for fret: {fret_name}")
            global_fret_positions[fret_name] = self.get_global_position(
                source_frame=fret_name,
                target_frame="world",
                local_position=local_pos
            )

        return global_string_positions, global_fret_positions


def main(args=None):
    rclpy.init(args=args)
    try:
        # Initialize the node
        node = GuitarTransform()

        # Load the URDF file
        guitar = URDF.load("guitar.urdf")

        # Extract string and fret positions from URDF
        string_positions = {}
        fret_positions = {}

        for string in guitar.links:
            if "str_" in string.name:
                # Extract translation from 4x4 matrix
                string_positions[string.name] = string.visuals[0].origin[:3, 3]

        for fret in guitar.links:
            if "fret" in fret.name:
                # Extract translation from 4x4 matrix
                fret_positions[fret.name] = fret.visuals[0].origin[:3, 3]

        # Log extracted positions
        node.get_logger().info(f"Local String Positions: {string_positions}")
        node.get_logger().info(f"Local Fret Positions: {fret_positions}")

        # Transform local positions to global positions
        global_string_positions, global_fret_positions = node.calculate_global_positions(
            string_positions, fret_positions
        )

        # Log global positions
        node.get_logger().info(f"Global String Positions: {global_string_positions}")
        node.get_logger().info(f"Global Fret Positions: {global_fret_positions}")

    finally:
        # Ensure proper shutdown
        rclpy.shutdown()


if __name__ == "__main__":
    main()
